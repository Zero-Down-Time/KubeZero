kubezero:
  {{- if .Values.global }}
  global:
    {{- toYaml .Values.global | nindent 4 }}
  {{- end }}
  calico:
    enabled: {{ .Values.calico.enabled  }}
    type: {{ default "kustomize" .Values.calico.type  }}
    values:
      network: {{ default "vxlan" .Values.calico.network }}
      mtu: {{ default "8941" .Values.calico.mtu }}
      prometheus: {{ .Values.prometheus.enabled }}
  cert-manager:
    enabled: {{ index .Values "cert-manager" "enabled" }}
    values:
      {{- if eq .Values.platform "aws" }}
      cert-manager:
        podAnnotations:
          iam.amazonaws.com/role: "{{ index .Values "cert-manager" "IamArn" }}"
      {{- end }}

      {{- if not .Values.kiam.not_ready }}
      clusterIssuer:
        name: letsencrypt-dns-prod
        server: https://acme-v02.api.letsencrypt.org/directory
        email: {{ index .Values "cert-manager" "email" }}
        solvers:
          - selector:
              dnsZones:
              {{- with index .Values "cert-manager" "dnsZones" }}
              {{- . | toYaml | nindent 14 }}
              {{- end }}
            dns01:
              {{- if eq .Values.platform "aws" }}
              route53:
                region: {{ .Values.region }}
              {{- else }}
              {{- with index .Values "cert-manager" "solvers" }}
              {{- . | toYaml | nindent 14 }}
              {{- end }}
              {{- end }}
      {{- end }}


  {{- if eq .Values.platform "aws" }}
  {{- if not ( index .Values "cert-manager" "not_ready" ) }}
  kiam:
    enabled: {{ .Values.kiam.enabled }}
    values:
      kiam:
        server:
          assumeRoleArn: "{{ .Values.kiam.IamArn }}"
          deployment:
            replicas: {{ ternary 2 1 .Values.HighAvailableControlplane }}
          prometheus:
            servicemonitor:
              enabled: {{ .Values.prometheus.enabled }}
  {{- end }}

  {{- if not .Values.kiam.not_ready }}
  # AWS only components
  aws-ebs-csi-driver:
    enabled: {{ index .Values "aws-ebs-csi-driver" "enabled" }}
    values:
      aws-ebs-csi-driver:
        replicaCount: {{ ternary 2 1 .Values.HighAvailableControlplane }}
        podAnnotations:
          iam.amazonaws.com/role: "{{ index .Values "aws-ebs-csi-driver" "IamArn" }}"
        extraVolumeTags:
          Name: {{ .Values.ClusterName }}
  {{- end }}

  aws-efs-csi-driver:
    enabled: {{ index .Values "aws-efs-csi-driver" "enabled" }}
    values:
      aws-efs-csi-driver:
        nodeSelector:
          node.kubernetes.io/csi.efs.fs: {{ index .Values "aws-efs-csi-driver" "EfsId" }}
      PersistentVolume:
        create: true
        EfsId: {{ index .Values "aws-efs-csi-driver" "EfsId" }}
        Name: {{ default "kubezero-efs-pv" ( index .Values "aws-efs-csi-driver" "PVName" ) }}
  {{- end }}

  istio:
    enabled: {{ .Values.istio.enabled }}
    values:
      istiod:
        replicaCount: {{ ternary 2 1 .Values.HighAvailableControlplane }}
      {{- if .Values.istio.ingress }}
      ingress:
        {{- toYaml .Values.istio.ingress | nindent 8 }}
      {{- end }}

  metrics:
    enabled: {{ .Values.metrics.enabled }}
    values:
      {{- if and .Values.metrics.istio.enabled .Values.istio.enabled }}
      grafana:
        istio:
          {{- with .Values.metrics.istio }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- end }}

argo-cd:
  {{- with index .Values "argo-cd" "server" }}
  server:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with index .Values "argo-cd" "configs" }}
  configs:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if and ( index .Values "argo-cd" "istio" "enabled" ) .Values.istio.enabled }}
  istio:
    {{- with index .Values "argo-cd" "istio" }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- end }}
