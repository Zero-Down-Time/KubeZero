image:
  repository: envoyproxy/ratelimit
  # see: https://hub.docker.com/r/envoyproxy/ratelimit/tags
  tag: 38f01982

log:
  level: warn
  format: json

# 1MB local cache for already reached limits to reduce calls to Redis
localCacheSize: 1048576

# Wether to block requests if ratelimiting is down
failureModeDeny: false

# rate limit descriptors for each domain aka. ingress class
descriptors:
  ingress: []
# - key: sourceIp
#   value: sixtyPerMinute
#   descriptors:
#   - key: remote_address
#     rate_limit:
#       unit: minute
#       requests_per_unit: 60
# - key: sourceIp
#   value: tenPerSecond
#   descriptors:
#   - key: remote_address
#     value: "10.*"
#     rate_limit:
#       unlimited: true
#   - key: remote_address
#     value: "172.16.*"
#     rate_limit:
#       unlimited: true
#   - key: remote_address
#     rate_limit:
#       unit: second
#       requests_per_unit: 10
# - key: headers
#   value: 180PerMinute
#   descriptors:
#   - key: userAgent
#     rate_limit:
#       unit: minute
#       requests_per_unit: 180

  privateIngress: []
# - key: sourceIp
#   value: sixtyPerMinute
#   descriptors:
#   - key: remote_address
#     rate_limit:
#       unit: minute
#       requests_per_unit: 60
# - key: sourceIp
#   value: tenPerSecond
#   descriptors:
#   - key: remote_address
#     rate_limit:
#       unit: second
#       requests_per_unit: 10
# - key: headers
#   value: 180PerMinute
#   descriptors:
#   - key: userAgent
#     rate_limit:
#       unit: minute
#       requests_per_unit: 180

metrics:
  enabled: false
